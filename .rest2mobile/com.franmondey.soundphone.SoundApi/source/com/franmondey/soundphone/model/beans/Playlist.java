/**
 * File generated by Magnet rest2mobile 1.1 - May 20, 2015 11:24:35 AM
 * @see {@link http://developer.magnet.com}
 */

package com.franmondey.soundphone.model.beans;


/**
 * Generated from json example
{
  "duration" : 300224,
  "permalink_url" : "https://soundcloud.com/cadenzamusic/sets/felipe-valenzuela-dani",
  "reposts_count" : 0,
  "genre" : "TechHouse",
  "permalink" : "felipe-valenzuela-dani",
  "description" : "FollowingathreeyearhiatusfromCadenza,thelabelisdelightedtowelcomebackFelipeValenzuelaandDaniCasaranoforathirdreleaseontheLuciano’simprint.\r\n\r\nBothproducersarerespectedindividuallyfortheirprowessinthestudioandasDJs,butasacombinedforcecollaboratewithmagicaleffectinthestudio.TogetherthepairrunMelismarecordsandconsiderseachotherasmusicalsoulmates.Thepair’sfamiliaritywithdancefloorsacrosstheworldisreflectedinthesetwotracksforCadenza,continuingthelabelsrichmusicalhistoryofelectronicdancemusicfitforallpurposes.\r\n\r\n‘Instinct’opensthereleasewithaninstantbubblinggroove,supportedbyagroovybassmelody,crunchingclapsandshimmeringrides,dancingaroundthetrackscorerhythm.Subtledrumedits,reverberatingsnaresandwarmpadsgrabthelistener’sattention,whilstthetrackscentralrhythmmaintainsthepulseandlivelyfeelofthisexceptionalproduction.Aversatilesliceofintricatehousemusicthatwillfindit’swayintomanysetsthisSummer.\r\n\r\n‘Impulse’seesthepairventureintomoreavant-gardeterritory;exploringthemesofdissonance,syncopationandtensionandrelease.Lo-fielectronicsanddiscordantpianosnotescreateauniquepalletofsoundsrespondingtoeachother.Offbeatstringarrangementsandshimmeringsynthsevolveoverthe14+minutestrackduration.Perfectheadphoneelectronicswithstacksofdetailandfreshtouches.\r\n",
  "uri" : "https://api.soundcloud.com/playlists/109412258",
  "label_name" : "CadenzaRecords",
  "tag_list" : "Cadenza\"FelipeValenzuela\"\"DaniCasarano\"IntrospectionLuciano",
  "secret_uri" : "https://api.soundcloud.com/playlists/109412258?secret_token=s-IYA82",
  "track_count" : 2,
  "user_id" : 367906,
  "last_modified" : "2015/05/2013:13:20+0000",
  "license" : "all-rights-reserved",
  "id" : 109412258,
  "tracks_uri" : "https://api.soundcloud.com/playlists/109412258/tracks",
  "sharing" : "public",
  "secret_token" : "s-IYA82",
  "created_at" : "2015/05/2013:13:20+0000",
    ...

 */

public class Playlist {

  
  private String artwork_url;

  
  private String created_at;

  
  private String description;

  
  private Integer duration;

  
  private String embeddable_by;

  
  private String genre;

  
  private Integer id;

  
  private String kind;

  
  private String label_name;

  
  private String last_modified;

  
  private String license;

  
  private Integer likes_count;

  
  private String permalink;

  
  private String permalink_url;

  
  private String release;

  
  private Integer reposts_count;

  
  private String secret_token;

  
  private String secret_uri;

  
  private String sharing;

  
  private Boolean streamable;

  
  private String tag_list;

  
  private String title;

  
  private Integer track_count;

  
  private String tracks_uri;

  
  private String uri;

  
  private User user;

  
  private Integer user_id;

  public String getArtwork_url() {
    return artwork_url;
  }
  public String getCreated_at() {
    return created_at;
  }
  public String getDescription() {
    return description;
  }
  public Integer getDuration() {
    return duration;
  }
  public String getEmbeddable_by() {
    return embeddable_by;
  }
  public String getGenre() {
    return genre;
  }
  public Integer getId() {
    return id;
  }
  public String getKind() {
    return kind;
  }
  public String getLabel_name() {
    return label_name;
  }
  public String getLast_modified() {
    return last_modified;
  }
  public String getLicense() {
    return license;
  }
  public Integer getLikes_count() {
    return likes_count;
  }
  public String getPermalink() {
    return permalink;
  }
  public String getPermalink_url() {
    return permalink_url;
  }
  public String getRelease() {
    return release;
  }
  public Integer getReposts_count() {
    return reposts_count;
  }
  public String getSecret_token() {
    return secret_token;
  }
  public String getSecret_uri() {
    return secret_uri;
  }
  public String getSharing() {
    return sharing;
  }
  public Boolean getStreamable() {
    return streamable;
  }
  public String getTag_list() {
    return tag_list;
  }
  public String getTitle() {
    return title;
  }
  public Integer getTrack_count() {
    return track_count;
  }
  public String getTracks_uri() {
    return tracks_uri;
  }
  public String getUri() {
    return uri;
  }
  public User getUser() {
    return user;
  }
  public Integer getUser_id() {
    return user_id;
  }

  /**
  * Builder for Playlist
  **/
  public static class PlaylistBuilder {
    private Playlist toBuild = new Playlist();

    public PlaylistBuilder() {
    }

    public Playlist build() {
      return toBuild;
    }

    public PlaylistBuilder artwork_url(String value) {
      toBuild.artwork_url = value;
      return this;
    }
    public PlaylistBuilder created_at(String value) {
      toBuild.created_at = value;
      return this;
    }
    public PlaylistBuilder description(String value) {
      toBuild.description = value;
      return this;
    }
    public PlaylistBuilder duration(Integer value) {
      toBuild.duration = value;
      return this;
    }
    public PlaylistBuilder embeddable_by(String value) {
      toBuild.embeddable_by = value;
      return this;
    }
    public PlaylistBuilder genre(String value) {
      toBuild.genre = value;
      return this;
    }
    public PlaylistBuilder id(Integer value) {
      toBuild.id = value;
      return this;
    }
    public PlaylistBuilder kind(String value) {
      toBuild.kind = value;
      return this;
    }
    public PlaylistBuilder label_name(String value) {
      toBuild.label_name = value;
      return this;
    }
    public PlaylistBuilder last_modified(String value) {
      toBuild.last_modified = value;
      return this;
    }
    public PlaylistBuilder license(String value) {
      toBuild.license = value;
      return this;
    }
    public PlaylistBuilder likes_count(Integer value) {
      toBuild.likes_count = value;
      return this;
    }
    public PlaylistBuilder permalink(String value) {
      toBuild.permalink = value;
      return this;
    }
    public PlaylistBuilder permalink_url(String value) {
      toBuild.permalink_url = value;
      return this;
    }
    public PlaylistBuilder release(String value) {
      toBuild.release = value;
      return this;
    }
    public PlaylistBuilder reposts_count(Integer value) {
      toBuild.reposts_count = value;
      return this;
    }
    public PlaylistBuilder secret_token(String value) {
      toBuild.secret_token = value;
      return this;
    }
    public PlaylistBuilder secret_uri(String value) {
      toBuild.secret_uri = value;
      return this;
    }
    public PlaylistBuilder sharing(String value) {
      toBuild.sharing = value;
      return this;
    }
    public PlaylistBuilder streamable(Boolean value) {
      toBuild.streamable = value;
      return this;
    }
    public PlaylistBuilder tag_list(String value) {
      toBuild.tag_list = value;
      return this;
    }
    public PlaylistBuilder title(String value) {
      toBuild.title = value;
      return this;
    }
    public PlaylistBuilder track_count(Integer value) {
      toBuild.track_count = value;
      return this;
    }
    public PlaylistBuilder tracks_uri(String value) {
      toBuild.tracks_uri = value;
      return this;
    }
    public PlaylistBuilder uri(String value) {
      toBuild.uri = value;
      return this;
    }
    public PlaylistBuilder user(User value) {
      toBuild.user = value;
      return this;
    }
    public PlaylistBuilder user_id(Integer value) {
      toBuild.user_id = value;
      return this;
    }
  }
}
